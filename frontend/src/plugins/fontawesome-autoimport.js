let beginAt;
const path = require("path");
const fs = require("fs");

const src = path.resolve(__dirname, "../..", "src");
const fileRegex = new RegExp(/\.(vue|js)$/);
const iconRegex = /<VIcon.+?icon="(fasl|fab):([a-z-]+)|icon: "(fasl|fab):([a-z-]+)"/gms;

const outputFolder = `${src}/plugins`;
const outputFile = `${outputFolder}/icons.js`;

const icons = new Set();
const brandIcons = new Set();

const pascalCase = (str) => {
  return str.split("-").reduce((acc, str) => `${acc}${str[0].toUpperCase() + str.substring(1)}`, "");
};

const findIcons = (filePath) => {
  [...fs.readFileSync(filePath).toString().matchAll(iconRegex)].forEach((match) => {
    if ((match[1] ?? match[3]) === "fasl") {
      icons.add(`fa${pascalCase(match[2] ?? match[4])}`);
    }
    if ((match[1] ?? match[3]) === "fab") {
      brandIcons.add(`fa${pascalCase(match[2] ?? match[4])}`);
    }
  });
};

const parse = (path) => {
  fs.readdirSync(path).forEach((entry) => {
    const entryPath = `${path}/${entry}`;

    fs.lstatSync(entryPath).isDirectory() ? parse(entryPath) : fileRegex.test(entry) && findIcons(entryPath);
  });
};

const getOldIcons = () => {
  return [
    ...new Set(
      [...(fs.existsSync(outputFile) && fs.readFileSync(outputFile)).toString().matchAll(/fa[A-Z]\w+/gms)].map(
        (match) => match[0]
      )
    ),
  ].sort();
};

const generateImports = (iconsSet, p) => `import { ${[...iconsSet].join(", ")} } from "${p}";`;

const saveToFile = () => {
  let output =
    "/* eslint-disable */\n" +
    "/* prettier-ignore */\n" +
    "// @ts-nocheck\n" +
    "// Generated by fontawesome-autoimport\n" +
    'import { library } from "@fortawesome/fontawesome-svg-core";';

  output += "\n" + generateImports(icons, "@fortawesome/sharp-light-svg-icons");
  output += "\n" + generateImports(brandIcons, "@fortawesome/free-brands-svg-icons");

  output += `\n\nconst icons = [${[...icons].join(",")}];`;
  output += `\n\nconst brandIcons = [${[...brandIcons].join(",")}];`;

  output +=
    "\n\nexport default function initIconLibrary() {\n" + "  library.add(...[...icons, ...brandIcons]);\n" + "}";

  fs.mkdir(outputFolder, { recursive: true }, (err) => {
    if (err) throw err;

    fs.writeFile(outputFile, output, (err) =>
      console.log(err || `- Fontawesome treeshaking list generated. (took ${Date.now() - beginAt} ms)`)
    );
  });
};

function run() {
  beginAt = Date.now();
  parse(src);
  findIcons(path.resolve(__dirname, "../..", "themeConfig.js"));

  const oldIcons = getOldIcons();
  const newIcons = [...icons, ...brandIcons].sort();

  if (JSON.stringify(oldIcons) !== JSON.stringify(newIcons)) {
    saveToFile();
  }
}

export const fontawesomeAutoimport = () => {
  return {
    name: "fontawesome-autoimport",
    configResolved(config) {
      run();
    },
    handleHotUpdate(config) {
      run();
    },
  };
};
